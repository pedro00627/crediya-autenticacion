apply plugin: 'org.springframework.boot'

configurations {
    configureEach {
        exclude group: 'org.springframework.boot', module: 'spring-boot-starter-logging'
        exclude group: 'org.apache.logging.log4j', module: 'log4j-to-slf4j'
        exclude group: 'ch.qos.logback', module: 'logback-classic'
        exclude group: 'ch.qos.logback', module: 'logback-core'
        exclude group: 'org.slf4j', module: 'jcl-over-slf4j'
        exclude group: 'org.slf4j', module: 'slf4j-log4j12'
        exclude group: 'log4j', module: 'log4j-jcl'
    }
}

dependencies {
    implementation project(':r2dbc-postgresql')
    implementation project(':reactive-web')
    implementation project(':usecase')
    implementation project(':model')

    testImplementation 'com.tngtech.archunit:archunit:1.4.1'


    implementation "org.reactivecommons.utils:object-mapper:${reactiveCommonsMapperVersion}"

    testImplementation('org.springframework.boot:spring-boot-starter-webflux')
    implementation 'org.springframework.boot:spring-boot-starter'
    implementation 'org.springframework.boot:spring-boot-starter-log4j2'
    implementation 'org.apache.logging.log4j:log4j-layout-template-json'
    runtimeOnly('org.springframework.boot:spring-boot-devtools')

    implementation 'org.springframework.boot:spring-boot-starter-actuator'

    // Micrometer Tracing dependencies
    implementation 'io.micrometer:context-propagation:1.0.6'
    implementation 'io.micrometer:micrometer-tracing-bridge-brave'
    implementation 'org.springframework.boot:spring-boot-starter-validation'

    runtimeOnly('org.springframework.boot:spring-boot-devtools')

    testImplementation('org.springframework.boot:spring-boot-starter-test') {
        exclude group: 'org.apache.logging.log4j', module: 'log4j-to-slf4j'
        exclude group: 'org.springframework.boot', module: 'spring-boot-starter-logging'
    }
    testImplementation "com.tngtech.archunit:archunit:${archunitVersion}"
    testImplementation 'com.fasterxml.jackson.core:jackson-databind'

}

tasks.register('explodedJar', Copy) {
    with jar
    into layout.buildDirectory.dir("exploded")
}

jar {
    // To disable the *-plain.jar
    enabled = false
}

bootJar {
    // Sets output jar name
    archiveFileName = "${project.getParent().getName()}.${archiveExtension.get()}"
}