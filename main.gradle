apply plugin: 'info.solidsoft.pitest.aggregator'

// Definición de commonVersion en el ámbito global para todos los proyectos
allprojects {
    ext {
        commonVersion = '0.0.4'
    }

    repositories {
        mavenCentral()
        maven { url = "https://repo.spring.io/snapshot" }
        maven { url = "https://repo.spring.io/milestone" }
        maven {
            name = "GitHubPackages"
            url = uri("https://maven.pkg.github.com/pedro00627/crediya-common")
            credentials {
                username = System.getenv("GITHUB_ACTOR")
                password = System.getenv("GITHUB_TOKEN")
            }
        }
    }
}

subprojects {
    apply plugin: 'java'
    apply plugin: 'jacoco'
    apply plugin: 'io.spring.dependency-management'
    apply plugin: 'info.solidsoft.pitest'

    compileJava.dependsOn validateStructure

    java {
        sourceCompatibility = JavaVersion.VERSION_21
        targetCompatibility = JavaVersion.VERSION_21
    }

    test {
        useJUnitPlatform()
    }

    // SOLO aplicar estas dependencias a módulos QUE NO SEAN DE DOMINIO
    if (!project.path.contains(':model') && !project.path.contains(':usecase')) {
        dependencies {
            implementation 'io.projectreactor:reactor-core'
            implementation 'io.projectreactor.addons:reactor-extra'
            implementation "co.com.pragma:crediya-common-starter:${commonVersion}"
            implementation platform("org.springframework.boot:spring-boot-dependencies:${springBootVersion}")

            testImplementation 'io.projectreactor.tools:blockhound-junit-platform:1.0.13.RELEASE'
            testImplementation 'io.projectreactor:reactor-test'
            testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
            testImplementation 'org.springframework.boot:spring-boot-starter-test'

            compileOnly "org.projectlombok:lombok:${lombokVersion}"
            annotationProcessor "org.projectlombok:lombok:${lombokVersion}"
            testCompileOnly "org.projectlombok:lombok:${lombokVersion}"
            testAnnotationProcessor "org.projectlombok:lombok:${lombokVersion}"
        }
    }

    // Para módulos de dominio: dependencias mínimas + reactor-core para reactividad
    if (project.path.contains(':model') || project.path.contains(':usecase')) {
        dependencies {
            // Platform necesario para resolver versiones
            implementation platform("org.springframework.boot:spring-boot-dependencies:${springBootVersion}")

            // Solo reactor-core para reactividad (sin dependencias de Spring)
            implementation 'io.projectreactor:reactor-core'

            compileOnly "org.projectlombok:lombok:${lombokVersion}"
            annotationProcessor "org.projectlombok:lombok:${lombokVersion}"
            testCompileOnly "org.projectlombok:lombok:${lombokVersion}"
            testAnnotationProcessor "org.projectlombok:lombok:${lombokVersion}"
        }
    }

    tasks.withType(Test).configureEach {
        if (JavaVersion.current().isCompatibleWith(JavaVersion.VERSION_13)) {
            jvmArgs += [
                    "-XX:+AllowRedefinitionToAddDeleteMethods"
            ]
        }
    }

    test.finalizedBy(project.tasks.jacocoTestReport)

    pitest {
        targetClasses = ['co.com.pragma.*']
        excludedClasses = []
        excludedTestClasses = []
        pitestVersion = '1.20.1'
        verbose = false
        outputFormats = ['XML', 'HTML']
        threads = 8
        exportLineCoverage = true
        useClasspathFile = true
        timestampedReports = false
        fileExtensionsToFilter.addAll('xml', 'orbit')
        junit5PluginVersion = '1.2.2'
        failWhenNoMutations = false
        jvmArgs = ["-XX:+AllowRedefinitionToAddDeleteMethods"]
    }

    jacocoTestReport {
        dependsOn test, 'pitest'
        reports {
            xml.setRequired true
            xml.setOutputLocation layout.buildDirectory.file("reports/jacoco.xml")
            csv.setRequired false
            html.setOutputLocation layout.buildDirectory.dir("reports/jacocoHtml")
        }
    }
}

jacoco {
    toolVersion = "${jacocoVersion}"
    reportsDirectory.set(layout.buildDirectory.dir("reports"))
}

tasks.register('jacocoMergedReport', JacocoReport) {
    dependsOn = [test, subprojects.jacocoTestReport, pitestReportAggregate]
    additionalSourceDirs.setFrom files(subprojects.sourceSets.main.allSource.srcDirs)
    sourceDirectories.setFrom files(subprojects.sourceSets.main.allSource.srcDirs)
    classDirectories.setFrom files(subprojects.sourceSets.main.output)
    executionData.setFrom project.fileTree(dir: '.', include: '**/build/jacoco/test.exec')
    reports {
        xml.setRequired true
        csv.setRequired false
        html.setRequired true
    }
}

tasks.withType(JavaCompile).configureEach {
    options.compilerArgs = [
            '-Amapstruct.suppressGeneratorTimestamp=true'
    ]
}

pitestReportAggregate {
    doLast {
        def reportDir = layout.buildDirectory.dir("reports/pitest").get().asFile
        def consolidatedReport = new File(reportDir, 'mutations.xml')
        consolidatedReport.withWriter { writer ->
            writer.write("<mutations>\n")
            subprojects.each { subproject ->
                def xmlReport = subproject.layout.buildDirectory.file("reports/pitest/mutations.xml").get().asFile
                if (xmlReport.exists()) {
                    def xmlContent = xmlContent.replaceAll("<\\?xml[^>]*>", "")
                    xmlContent = xmlContent.replaceAll("</?mutations( partial=\"true\")?>", "")
                    writer.write(xmlContent.trim() + "\n")
                }
            }
            writer.write("</mutations>")
        }
    }
}

// Tarea wrapper solo para el proyecto root
if (project == rootProject) {
    tasks.named('wrapper') {
        gradleVersion = '8.14.3'
    }
}
